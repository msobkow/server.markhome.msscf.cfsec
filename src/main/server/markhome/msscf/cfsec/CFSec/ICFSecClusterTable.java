
// Description: Java 11 DbIO interface for Cluster.

/*
 *	server.markhome.msscf.CFSec
 *
 *	Copyright (c) 2020-2025 Mark Stephen Sobkow
 *	
 *
 *	Manufactured by MSS Code Factory 2.13
 */

package server.markhome.msscf.cfsec.CFSec;

import java.lang.reflect.*;
import java.net.*;
import java.rmi.*;
import java.sql.*;
import java.text.*;
import java.util.*;
import org.msscf.msscf.cflib.CFLib.*;
import server.markhome.msscf.cfsec.CFSecObj.*;

/*
 *	CFSecClusterTable database interface for Cluster
 */
public interface ICFSecClusterTable
{
	/**
	 *	Get the next SecAppIdGen id generator value.
	 *
	 *	@param	PKey	The primary key of the Cluster instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	int nextSecAppIdGen( CFSecAuthorization Authorization,
		CFSecClusterPKey PKey );

	/**
	 *	Get the next SecAppIdGen id generator value.
	 *
	 *	@param	argId	The Cluster key attribute of the instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	int nextSecAppIdGen( CFSecAuthorization Authorization,
		long argId );

	/**
	 *	Get the next SecFormIdGen id generator value.
	 *
	 *	@param	PKey	The primary key of the Cluster instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	int nextSecFormIdGen( CFSecAuthorization Authorization,
		CFSecClusterPKey PKey );

	/**
	 *	Get the next SecFormIdGen id generator value.
	 *
	 *	@param	argId	The Cluster key attribute of the instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	int nextSecFormIdGen( CFSecAuthorization Authorization,
		long argId );

	/**
	 *	Get the next SecGroupIdGen id generator value.
	 *
	 *	@param	PKey	The primary key of the Cluster instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	int nextSecGroupIdGen( CFSecAuthorization Authorization,
		CFSecClusterPKey PKey );

	/**
	 *	Get the next SecGroupIdGen id generator value.
	 *
	 *	@param	argId	The Cluster key attribute of the instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	int nextSecGroupIdGen( CFSecAuthorization Authorization,
		long argId );

	/**
	 *	Get the next HostNodeIdGen id generator value.
	 *
	 *	@param	PKey	The primary key of the Cluster instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	long nextHostNodeIdGen( CFSecAuthorization Authorization,
		CFSecClusterPKey PKey );

	/**
	 *	Get the next HostNodeIdGen id generator value.
	 *
	 *	@param	argId	The Cluster key attribute of the instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	long nextHostNodeIdGen( CFSecAuthorization Authorization,
		long argId );

	/**
	 *	Get the next SecGroupFormIdGen id generator value.
	 *
	 *	@param	PKey	The primary key of the Cluster instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	long nextSecGroupFormIdGen( CFSecAuthorization Authorization,
		CFSecClusterPKey PKey );

	/**
	 *	Get the next SecGroupFormIdGen id generator value.
	 *
	 *	@param	argId	The Cluster key attribute of the instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	long nextSecGroupFormIdGen( CFSecAuthorization Authorization,
		long argId );

	/**
	 *	Get the next SecGrpIncIdGen id generator value.
	 *
	 *	@param	PKey	The primary key of the Cluster instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	long nextSecGrpIncIdGen( CFSecAuthorization Authorization,
		CFSecClusterPKey PKey );

	/**
	 *	Get the next SecGrpIncIdGen id generator value.
	 *
	 *	@param	argId	The Cluster key attribute of the instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	long nextSecGrpIncIdGen( CFSecAuthorization Authorization,
		long argId );

	/**
	 *	Get the next SecGrpMembIdGen id generator value.
	 *
	 *	@param	PKey	The primary key of the Cluster instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	long nextSecGrpMembIdGen( CFSecAuthorization Authorization,
		CFSecClusterPKey PKey );

	/**
	 *	Get the next SecGrpMembIdGen id generator value.
	 *
	 *	@param	argId	The Cluster key attribute of the instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	long nextSecGrpMembIdGen( CFSecAuthorization Authorization,
		long argId );

	/**
	 *	Get the next ServiceIdGen id generator value.
	 *
	 *	@param	PKey	The primary key of the Cluster instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	long nextServiceIdGen( CFSecAuthorization Authorization,
		CFSecClusterPKey PKey );

	/**
	 *	Get the next ServiceIdGen id generator value.
	 *
	 *	@param	argId	The Cluster key attribute of the instance generating the id.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 *
	 *	@return The next id value as generated by the cluster database.
	 */
	long nextServiceIdGen( CFSecAuthorization Authorization,
		long argId );


	/**
	 *	Create the instance in the database, and update the specified buffer
	 *	with the assigned primary key.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	Buff	The buffer to be created.
	 */
	void createCluster( CFSecAuthorization Authorization,
		CFSecClusterBuff Buff );


	/**
	 *	Update the instance in the database, and update the specified buffer
	 *	with any calculated changes imposed by the associated stored procedure.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	Buff	The buffer to be updated.
	 */
	void updateCluster( CFSecAuthorization Authorization,
		CFSecClusterBuff Buff );


	/**
	 *	Delete the instance from the database.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	Buff	The buffer to be deleted.
	 */
	void deleteCluster( CFSecAuthorization Authorization,
		CFSecClusterBuff Buff );
	/**
	 *	Delete the Cluster instance identified by the primary key attributes.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	argId	The Cluster key attribute of the instance generating the id.
	 */
	void deleteClusterByIdIdx( CFSecAuthorization Authorization,
		long argId );

	/**
	 *	Delete the Cluster instance identified by the primary key.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	argKey	The primary key identifying the instance to be deleted.
	 */
	void deleteClusterByIdIdx( CFSecAuthorization Authorization,
		CFSecClusterPKey argKey );
	/**
	 *	Delete the Cluster instances identified by the key UDomNameIdx.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	argFullDomName	The Cluster key attribute of the instance generating the id.
	 */
	void deleteClusterByUDomNameIdx( CFSecAuthorization Authorization,
		String argFullDomName );

	/**
	 *	Delete the Cluster instances identified by the key UDomNameIdx.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	argKey	The key identifying the instances to be deleted.
	 */
	void deleteClusterByUDomNameIdx( CFSecAuthorization Authorization,
		CFSecClusterByUDomNameIdxKey argKey );
	/**
	 *	Delete the Cluster instances identified by the key UDescrIdx.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	argDescription	The Cluster key attribute of the instance generating the id.
	 */
	void deleteClusterByUDescrIdx( CFSecAuthorization Authorization,
		String argDescription );

	/**
	 *	Delete the Cluster instances identified by the key UDescrIdx.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	argKey	The key identifying the instances to be deleted.
	 */
	void deleteClusterByUDescrIdx( CFSecAuthorization Authorization,
		CFSecClusterByUDescrIdxKey argKey );


	/**
	 *	Read the derived Cluster buffer instance by primary key.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	PKey	The primary key of the Cluster instance to be read.
	 *
	 *	@return The buffer instance for the specified primary key, or null if there is
	 *		no such existing key value.
	 */
	CFSecClusterBuff readDerived( CFSecAuthorization Authorization,
		CFSecClusterPKey PKey );

	/**
	 *	Lock the derived Cluster buffer instance by primary key.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	PKey	The primary key of the Cluster instance to be locked.
	 *
	 *	@return The buffer instance for the specified primary key, or null if there is
	 *		no such existing key value.
	 */
	CFSecClusterBuff lockDerived( CFSecAuthorization Authorization,
		CFSecClusterPKey PKey );

	/**
	 *	Read all Cluster instances.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@return An array of derived buffer instances, potentially with 0 elements in the set.
	 */
	CFSecClusterBuff[] readAllDerived( CFSecAuthorization Authorization );

	/**
	 *	Read the derived Cluster buffer instance identified by the unique key IdIdx.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	argId	The Cluster key attribute of the instance generating the id.
	 *
	 *	@return The buffer instance for the specified key, or null if there is
	 *		no such existing key value.
	 */
	CFSecClusterBuff readDerivedByIdIdx( CFSecAuthorization Authorization,
		long Id );

	/**
	 *	Read the derived Cluster buffer instance identified by the unique key UDomNameIdx.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	argFullDomName	The Cluster key attribute of the instance generating the id.
	 *
	 *	@return The buffer instance for the specified key, or null if there is
	 *		no such existing key value.
	 */
	CFSecClusterBuff readDerivedByUDomNameIdx( CFSecAuthorization Authorization,
		String FullDomName );

	/**
	 *	Read the derived Cluster buffer instance identified by the unique key UDescrIdx.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	argDescription	The Cluster key attribute of the instance generating the id.
	 *
	 *	@return The buffer instance for the specified key, or null if there is
	 *		no such existing key value.
	 */
	CFSecClusterBuff readDerivedByUDescrIdx( CFSecAuthorization Authorization,
		String Description );

	/**
	 *	Read the specific Cluster buffer instance identified by the primary key.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	PKey	The primary key of the Cluster instance to be locked.
	 *
	 *	@return The buffer instance for the specified primary key, or null if there is
	 *		no such existing key value.
	 *
	 *	@throws	CFLibNotSupportedException thrown by client-side implementations.
	 */
	CFSecClusterBuff readBuff( CFSecAuthorization Authorization,
		CFSecClusterPKey PKey );

	/**
	 *	Lock the specific Cluster buffer instance identified by the primary key.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	PKey	The primary key of the Cluster instance to be locked.
	 *
	 *	@return The buffer instance for the specified primary key, or null if there is
	 *		no such existing key value.
	 *
	 *	@throws	CFLibNotSupportedException thrown by client-side implementations.
	 */
	CFSecClusterBuff lockBuff( CFSecAuthorization Authorization,
		CFSecClusterPKey PKey );

	/**
	 *	Read all the specific Cluster buffer instances.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@return All the specific Cluster instances in the database accessible for the Authorization.
	 */
	CFSecClusterBuff[] readAllBuff( CFSecAuthorization Authorization );

	/**
	 *	Read a page of all the specific Cluster buffer instances.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@return All the specific Cluster instances in the database accessible for the Authorization.
	 */
	CFSecClusterBuff[] pageAllBuff( CFSecAuthorization Authorization,
		Long priorId );

	/**
	 *	Read the specific Cluster buffer instance identified by the unique key IdIdx.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	argId	The Cluster key attribute of the instance generating the id.
	 *
	 *	@return The buffer instance for the specified key, or null if there is
	 *		no such existing key value.
	 *
	 *	@throws	CFLibNotSupportedException thrown by client-side implementations.
	 */
	CFSecClusterBuff readBuffByIdIdx( CFSecAuthorization Authorization,
		long Id );

	/**
	 *	Read the specific Cluster buffer instance identified by the unique key UDomNameIdx.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	argFullDomName	The Cluster key attribute of the instance generating the id.
	 *
	 *	@return The buffer instance for the specified key, or null if there is
	 *		no such existing key value.
	 *
	 *	@throws	CFLibNotSupportedException thrown by client-side implementations.
	 */
	CFSecClusterBuff readBuffByUDomNameIdx( CFSecAuthorization Authorization,
		String FullDomName );

	/**
	 *	Read the specific Cluster buffer instance identified by the unique key UDescrIdx.
	 *
	 *	@param	Authorization	The session authorization information.
	 *
	 *	@param	argDescription	The Cluster key attribute of the instance generating the id.
	 *
	 *	@return The buffer instance for the specified key, or null if there is
	 *		no such existing key value.
	 *
	 *	@throws	CFLibNotSupportedException thrown by client-side implementations.
	 */
	CFSecClusterBuff readBuffByUDescrIdx( CFSecAuthorization Authorization,
		String Description );

	/**
	 *	Release any prepared statements allocated by this instance.
	 *
	 *	@throws CFLibNotSupportedException thrown by client-side implementations.
	 */
	void releasePreparedStatements();
}
